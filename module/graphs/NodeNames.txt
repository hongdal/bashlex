    output = ast.node(kind='word', word=p[len(p)-1], parts=[],
        p[0] = ast.node(kind='redirect', input=None, type=p[1], heredoc=None,
        p[0] = ast.node(kind='redirect', input=p[1], type=p[2], heredoc=None,
        p[0] = ast.node(kind='redirect', input=None, type=p[1], heredoc=None,
        p[0] = ast.node(kind='redirect', input=p[1], type=p[2], heredoc=None,
        node = ast.node(kind='word', word=tokenword,
        node = ast.node(kind='word', word=expandedword,
        p[0] = ast.node(kind='command', parts=p[1], pos=_partsspan(p[1]))
        p[0] = ast.node(kind='compound',
                parts.append(ast.node(kind='reservedword', word=p[i],
            parts[i] = ast.node(kind='reservedword', word=';', pos=part.pos)
    p[0] = ast.node(kind='compound',
                    list=[ast.node(kind='for', parts=parts, pos=_partsspan(parts))],
    p[0] = ast.node(kind='function', name=name, body=body, parts=parts,
    lparen = ast.node(kind='reservedword', word=p[1], pos=p.lexspan(1))
    rparen = ast.node(kind='reservedword', word=p[3], pos=p.lexspan(3))
    p[0] = ast.node(kind='compound', list=parts, redirects=[],
    p[0] = ast.node(kind='compound',
                    list=[ast.node(kind='if', parts=parts, pos=_partsspan(parts))],
    lcurly = ast.node(kind='reservedword', word=p[1], pos=p.lexspan(1))
    rcurly = ast.node(kind='reservedword', word=p[3], pos=p.lexspan(3))
    p[0] = ast.node(kind='compound', list=parts, redirects=[],
            parts.append(ast.node(kind='reservedword', word=p[i], pos=p.lexspan(i)))
            p[0] = ast.node(kind='list', parts=parts, pos=_partsspan(parts))
        parts.append(ast.node(kind='operator', op=p[2], pos=p.lexspan(2)))
        p[0] = ast.node(kind='list', parts=parts, pos=_partsspan(parts))
        p[0].append(ast.node(kind='operator', op=p[2], pos=p.lexspan(2)))
        p[0] = ast.node(kind='operator', op=';', pos=p.lexspan(1))
            parts.append(ast.node(kind='operator', op=p[2], pos=p.lexspan(2)))
        p[0] = ast.node(kind='list', parts=parts, pos=_partsspan(parts))
        p[0].append(ast.node(kind='operator', op=p[2], pos=p.lexspan(2)))
            p[0] = ast.node(kind='pipeline', parts=p[1],
        node = ast.node(kind='reservedword', word='!', pos=p.lexspan(1))
            p[0] = ast.node(kind='pipeline', parts=[node, p[2]],
        p[0].append(ast.node(kind='pipe', pipe=p[2], pos=p.lexspan(2)))
